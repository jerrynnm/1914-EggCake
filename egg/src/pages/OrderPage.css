// src/pages/OrderPage.jsx
import React, { useState, useEffect } from "react";
import "./OrderPage.css";
import { addOrder } from "../firebase"; // 新增訂單到 Firestore

const FLAVORS = ["起士", "奧利奧", "黑糖"];

export default function OrderPage() {
  // ──────────────────────────────────────────
  // 一、State
  // ──────────────────────────────────────────

  // (1) 使用者正在填的「目前這一筆」：
  const [itemType, setItemType] = useState("原味"); // 原味｜特價綜合｜內餡
  const [plainCount, setPlainCount] = useState(1); // 只用於 type==="原味"
  const [comboCounts, setComboCounts] = useState({
    起士: 0,
    奧利奧: 0,
    黑糖: 0,
  }); // 只用於 type==="特價綜合"
  const [fillingCounts, setFillingCounts] = useState({
    起士: 0,
    奧利奧: 0,
    黑糖: 0,
  }); // 只用於 type==="內餡"
  const [note, setNote] = useState(""); // 備註

  // (2) 暫存區：把使用者「確認新增」的多筆項目存在這裡
  //   結構同一筆 orderData，但不會寫入 FIRESTORE，等 user 「送出」再一次同步
  const [tempOrders, setTempOrders] = useState([]);

  // (3) 當前 UI：選完一筆可以「直接送出」或「確認新增」
  //     comboTotal、fillingTotal 用來判斷是否正好 3
  const comboTotal = Object.values(comboCounts).reduce((a, b) => a + b, 0);
  const fillingTotal = Object.values(fillingCounts).reduce((a, b) => a + b, 0);

  // ──────────────────────────────────────────
  // 二、輔助函式：處理加減、加入暫存、直接送出
  // ──────────────────────────────────────────

  // (A) 「特價綜合／內餡」的口味 +1
  const handleClickComboFlavor = (flavor) => {
    if (comboTotal >= 3) return;
    setComboCounts((prev) => ({
      ...prev,
      [flavor]: prev[flavor] + 1,
    }));
  };
  const handleClickFillingFlavor = (flavor) => {
    if (fillingTotal >= 3) return;
    setFillingCounts((prev) => ({
      ...prev,
      [flavor]: prev[flavor] + 1,
    }));
  };

  // (B) 減少某口味（可選擇實作或不做）
  const handleRemoveComboFlavor = (flavor) => {
    if (comboCounts[flavor] <= 0) return;
    setComboCounts((prev) => ({
      ...prev,
      [flavor]: prev[flavor] - 1,
    }));
  };
  const handleRemoveFillingFlavor = (flavor) => {
    if (fillingCounts[flavor] <= 0) return;
    setFillingCounts((prev) => ({
      ...prev,
      [flavor]: prev[flavor] - 1,
    }));
  };

  // (C) 加入暫存：按「確認新增」時，先驗證項目是否正確，再存到 tempOrders
  const handleConfirmAdd = () => {
    let newItem = null;

    if (itemType === "原味") {
      if (plainCount < 1) {
        alert("請輸入至少 1 份原味雞蛋糕");
        return;
      }
      newItem = {
        type: "原味",
        plainCount,
        note: note.trim(),
      };
    } else if (itemType === "特價綜合") {
      if (comboTotal !== 3) {
        alert("特價綜合雞蛋糕請選擇剛好 3 顆口味");
        return;
      }
      newItem = {
        type: "特價綜合",
        comboCounts: { ...comboCounts },
        note: note.trim(),
      };
    } else if (itemType === "內餡") {
      if (fillingTotal !== 3) {
        alert("內餡雞蛋糕請選擇剛好 3 顆口味");
        return;
      }
      newItem = {
        type: "內餡",
        fillingCounts: { ...fillingCounts },
        note: note.trim(),
      };
    }

    // 把這筆 newItem 推到 tempOrders
    setTempOrders((prev) => [...prev, newItem]);

    // 加入後，把表單全部重置
    setItemType("原味");
    setPlainCount(1);
    setComboCounts({ 起士: 0, 奧利奧: 0, 黑糖: 0 });
    setFillingCounts({ 起士: 0, 奧利奧: 0, 黑糖: 0 });
    setNote("");
  };

  // (D) 直接送出：將目前這一筆立刻寫到 Firestore
  const handleDirectSend = async () => {
    let payload = null;

    if (itemType === "原味") {
      if (plainCount < 1) {
        alert("請輸入至少 1 份原味雞蛋糕");
        return;
      }
      payload = {
        type: "原味",
        plainCount,
        note: note.trim(),
      };
    } else if (itemType === "特價綜合") {
      if (comboTotal !== 3) {
        alert("特價綜合雞蛋糕請選擇剛好 3 顆口味");
        return;
      }
      payload = {
        type: "特價綜合",
        comboCounts: { ...comboCounts },
        note: note.trim(),
      };
    } else if (itemType === "內餡") {
      if (fillingTotal !== 3) {
        alert("內餡雞蛋糕請選擇剛好 3 顆口味");
        return;
      }
      payload = {
        type: "內餡",
        fillingCounts: { ...fillingCounts },
        note: note.trim(),
      };
    }

    try {
      await addOrder(payload);
      alert("已直接送出到廚房！");
      // 寫完後，清空表單
      setItemType("原味");
      setPlainCount(1);
      setComboCounts({ 起士: 0, 奧利奧: 0, 黑糖: 0 });
      setFillingCounts({ 起士: 0, 奧利奧: 0, 黑糖: 0 });
      setNote("");
    } catch (err) {
      console.error(err);
      alert("直接送出失敗，請稍後重試");
    }
  };

  // (E) 把 tempOrders 一次送出：寫到 Firestore，status 皆為 "pending"
  const handleSubmitAllTemp = async () => {
    if (tempOrders.length === 0) {
      alert("暫存區沒有訂單");
      return;
    }
    try {
      // 一筆一筆寫入
      for (let item of tempOrders) {
        await addOrder(item);
      }
      alert("所有暫存訂單已送出廚房！");
      setTempOrders([]); // 清空暫存
    } catch (err) {
      console.error(err);
      alert("送出暫存訂單時發生錯誤，請重試");
    }
  };

  // (F) 刪除暫存某一筆
  const handleRemoveTemp = (idx) => {
    setTempOrders((prev) => prev.filter((_, i) => i !== idx));
  };

  // (G) 減少「特價綜合／內餡」口味數量的方法
  //     如果要強制出現「－」按鈕，就同時給予減法 handler
  //     但這段可選，要不提供「長按口味按鈕」減少，這裡就不勾選減按鈕。

  // ──────────────────────────────────────────
  // 三、渲染 UI
  // ──────────────────────────────────────────
  return (
    <div className="order-page-container">
      <h1 className="page-title">🔍 選擇餐點</h1>

      {/* （1）選擇餐點種類 按鈕群 */}
      <div className="item-type-buttons">
        <button
          className={`item-type-btn ${
            itemType === "特價綜合" ? "active" : ""
          }`}
          onClick={() => setItemType("特價綜合")}
        >
          特價綜合雞蛋糕
        </button>
        <button
          className={`item-type-btn ${itemType === "內餡" ? "active" : ""}`}
          onClick={() => setItemType("內餡")}
        >
          內餡雞蛋糕
        </button>
        <button
          className={`item-type-btn ${itemType === "原味" ? "active" : ""}`}
          onClick={() => setItemType("原味")}
        >
          原味雞蛋糕
        </button>
      </div>

      {/* （2）動態顯示「新增：XXX雞蛋糕」區塊 */}
      <div className="new-item-section">
        <h2>新增：{itemType}雞蛋糕</h2>

        {/* 原味雞蛋糕 → 數量輸入 */}
        {itemType === "原味" && (
          <div className="form-group">
            <label className="label-inline">
              份數：
              <input
                type="number"
                min="1"
                value={plainCount}
                onChange={(e) =>
                  setPlainCount(Math.max(parseInt(e.target.value) || 1, 1))
                }
                className="input-number"
              />
            </label>
          </div>
        )}

        {/* 特價綜合雞蛋糕 → 口味按鈕 */}
        {itemType === "特價綜合" && (
          <div className="form-group">
            <p>請選擇三種口味（可重複，同口味最多 3 顆）：</p>
            <div className="flavor-buttons-container">
              {FLAVORS.map((fl) => (
                <button
                  key={fl}
                  className={`flavor-btn ${
                    comboCounts[fl] > 0 ? "flavor-selected" : ""
                  }`}
                  onClick={() => handleClickComboFlavor(fl)}
                >
                  {fl}
                  {comboCounts[fl] > 0 && (
                    <span className="flavor-count">×{comboCounts[fl]}</span>
                  )}
                </button>
              ))}
            </div>
            <p className="small-text">已選：({comboTotal}/3 顆)</p>
          </div>
        )}

        {/* 內餡雞蛋糕 → 口味按鈕 */}
        {itemType === "內餡" && (
          <div className="form-group">
            <p>請選擇三種口味（可重複，同口味最多 3 顆）：</p>
            <div className="flavor-buttons-container">
              {FLAVORS.map((fl) => (
                <button
                  key={fl}
                  className={`flavor-btn ${
                    fillingCounts[fl] > 0 ? "flavor-selected" : ""
                  }`}
                  onClick={() => handleClickFillingFlavor(fl)}
                >
                  {fl}
                  {fillingCounts[fl] > 0 && (
                    <span className="flavor-count">×{fillingCounts[fl]}</span>
                  )}
                </button>
              ))}
            </div>
            <p className="small-text">已選：({fillingTotal}/3 顆)</p>
          </div>
        )}

        {/* （3）備註欄位 */}
        <div className="form-group">
          <label className="label-block">
            輸入備註 (可空白)：
            <textarea
              value={note}
              onChange={(e) => setNote(e.target.value)}
              placeholder="例如：不要加蔥、外帶單放保溫袋…"
              className="input-textarea"
            />
          </label>
        </div>

        {/* （4）直接送出 vs 確認新增 */}
        <div className="action-buttons">
          <button className="btn-direct-send" onClick={handleDirectSend}>
            直接送出
          </button>
          <button className="btn-confirm-add" onClick={handleConfirmAdd}>
            確認新增
          </button>
        </div>
      </div>

      {/* （5）暫存訂單顯示區 */}
      <div className="temp-orders-section">
        <h2>暫存訂單顯示區</h2>
        {tempOrders.length === 0 ? (
          <div className="empty-note">目前沒有暫存訂單。</div>
        ) : (
          <ul className="temp-orders-list">
            {tempOrders.map((item, idx) => (
              <li key={idx} className="temp-order-card">
                {item.type === "原味" && (
                  <p>
                    【原味雞蛋糕】×{item.plainCount} 份
                    {item.note && <span>，備註：{item.note}</span>}
                  </p>
                )}
                {item.type === "特價綜合" && (
                  <div>
                    <p>【特價綜合雞蛋糕】</p>
                    <ul className="sub-list">
                      {FLAVORS.map((fl) => {
                        const cnt = item.comboCounts[fl];
                        return cnt > 0 ? (
                          <li key={fl}>
                            {fl} × {cnt}
                          </li>
                        ) : null;
                      })}
                    </ul>
                    {item.note && <p>備註：{item.note}</p>}
                  </div>
                )}
                {item.type === "內餡" && (
                  <div>
                    <p>【內餡雞蛋糕】</p>
                    <ul className="sub-list">
                      {FLAVORS.map((fl) => {
                        const cnt = item.fillingCounts[fl];
                        return cnt > 0 ? (
                          <li key={fl}>
                            {fl} × {cnt}
                          </li>
                        ) : null;
                      })}
                    </ul>
                    {item.note && <p>備註：{item.note}</p>}
                  </div>
                )}
                <button
                  className="btn-remove-temp"
                  onClick={() => handleRemoveTemp(idx)}
                >
                  刪除暫存
                </button>
              </li>
            ))}
          </ul>
        )}
        {tempOrders.length > 0 && (
          <button
            className="btn-submit-temp-all"
            onClick={handleSubmitAllTemp}
          >
            🚀 送出暫存
          </button>
        )}
      </div>
    </div>
  );
}
